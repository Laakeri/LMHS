Coprocessor, Copyright 2012 Norbert Manthey
This program may be redistributed or modified under the terms of the
GNU General Public License v2. A copy of the licence can be found in COPYING.

Please report bugs to Norbert.Manthey at tu-dresden.de

========== USING RISS AS PREPROCESSOR ONLY

The preprocessor of riss is able to output its postprocess information. Thus,
the preprocessed instance can be solved with another solver. The model for the
preprocessed formula can than be extended to a model for the original formula
again, by giving the model and the postprocess information to riss again. The
following lines show an example. More parameters for the solver can be
specified. Still, both "-CP_mapFile=" and "-CP_print=1" have to be specified.

It is recommended "-CP_comp=1" to also use the compress option. In this case,
the resulting formula will have dense variables and it should take less memory
to solve it by using another solver and should also use less memory.

Building the preprocessor:
make coprocessor

Using the preprocessor

file=$1
./coprocessor $file -CP_mapFile=map.map -CP_print=1 > solve.cnf
./solver solve.cnf > model.cnf
cat model.cnf | ./coprocessor -completeModel -CP_mapFile=map.map > out.cnf
./verify SAT out.cnf $file

Note: You do not need to run a SAT solver, if Coprocessor already returns that
the input formula is unsatisfiable (exit code 20).
Note: If you have build riss, use the command line parameter "-pponly", to
interrupt the solver after preprocessing.

---------- Using Coprocessor Features

If you want to see some statistics, use "-CP_verbose=X", where with increasing
the value of X more output is printed.

Run all technique without limits: add "-CP_unlimited" to the commandline

Use single techniques: add -CP_techniques=string to the commandline,
where string can be constructed out of the letters the represent a single
techniques (see ./coprocessor --verb-help for more information). Furthermore,
loops can be specified, e.g. string=[us]+v runs BCP and subsumption until
neither of the two can reduce the formula any more. Afterwards, VE is applied.

Keep the semantics of variables: add -CP_whiteFile=white.var to the commandline
The format of white.var is simply adding a variable per line. The semantics of
these variables will not be altered during preprocessing.
Note: this technique cannot be used with the compression (-CP_comp)

Eliminate variables: add -CP_blackFile.var to the commandline
The format of black.var is the same as for white.var (above). VE is applied
after preprocessing to each variable mentioned in that file.

Rewrite direct encoded domains/at-most-one constraints:
check "CP_rewrite" and "CP_rewAMO" in ./coprocessor --verb-help. Both domains
and cardinality constraints will be rewriten with either the regular encoding
or the 2-product encoding.
